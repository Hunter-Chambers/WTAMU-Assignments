// TEMPLATE CLASS PROVIDED: Table<RecordType>
//   This class is a container template class for a Table of records.
//   The template parameter, RecordType, is the data type of the records in the
//   Table. It may any type with a default constructor, a copy constructor,
//   an assignment operator, and an integer member variable called key.  It is
//   also assumed that the record's member variable data can be inserted into
//   an output stream for the benefit of the toString() member function.
//
// CONSTRUCTOR for the Table<RecordType> template class:
//   table( )
//     Postcondition: The Table has been initialized as an empty table.
//
//   table ( const table<RecordType>& source )
//     Postcondition:  The table has been initialized as a "deep" copy of source
//
// MODIFICATION MEMBER FUNCTIONS for the Table<RecordType> class:
//   void insert(const RecordType& entry)
//     Precondition: entry.key >= 0. Also if entry.key is not already a key in
//                   the table, then the table has space for another record
//     Postcondition: If the table already had a record with a key equal to
//                    entry.key, then that record is replaced by entry. Otherwise, 
//                    entry has been added as a new record of the table.
//
//   void remove(int key)
//     Postcondition: If a record was in the Table with the specified key, then
//                    that record has been removed; otherwise the table is unchanged.
//
// CONSTANT MEMBER FUNCTIONS for the Table<RecordType> class:
//   bool is_present(const Item& target) const
//     Postcondition: The return value is true if there is a record in the
//                    table with the specified key. Otherwise, the return value
//                    is false.
//
//   void find(int key, bool& found, RecordType& result) const
//     Postcondition: If a record is in the Table with the specified key, then
//                    found is true and result is set to a copy of the record with
//                    that key.  
//                    Otherwise found is false and the result contains garbage.
//
//   size_t size( ) const
//     Postcondition: Return value is the total number of records in the table.
//
// VALUE SEMANTICS for the Table<RecordType> template class:
//   Assignments and the copy constructor may be used with table objects.
//   This means that the operator = will be implemented.  Comparison 
//   operators really don't make sense for comparing two tables.
//
// DYNAMIC MEMORY USAGE by the Table<RecordType> template class:
//   If there is insufficient dynamic memory, then the copy constructor,
//   insert and the assignment operator could cause an exception if
//   memory is exhausted.
